#Implementing Api Gateway using Spring Cloud Gateway

#-------------------Eureka service discovery configs------------------------
spring.application.name=api-gateway
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
app.eureka-server=localhost

#This is standard port number for api-gateway
server.port=8083


#----------------------Product Service Route:

spring.cloud.gateway.routes[0].id=product-service
#This line assigns an identifier or ID to the first route.
#In this case, the ID is set as "order-service." The ID is used to uniquely identify routes and can be helpful for
#debugging and monitoring purposes.

spring.cloud.gateway.routes[0].uri=lb://product-service
#This line sets the URI or location of the target service for the route. In this case, the URI is specified
# as lb://order-service. The lb:// prefix is commonly used in Spring Cloud to indicate load-balancing, and
# "order-service" is the name of the service that will handle requests for this route.
#lb stands for load balanced ie when there are more than 1 instances otherwise use http instead of lb

spring.cloud.gateway.routes[0].predicates[0]=Path=/shopit/products/**
# This line defines a predicate for the route, which specifies the conditions under which this route will be matched.
# Predicates allow you to match incoming requests based on different criteria. In this case, the predicate is set as
# Path=/shopit/orders/**, which means that the route will match any request that starts with /shopit/orders/ followed
# by any number of characters.

#NOTE: So basically it works in reverse order of these config statements ie
#      First it take the client called uri which is matching to the predicate path, change its port number to the
#      service's port number specified by routes uri and re-route or call it while attaching the routes id to it
#      for debugging purposes.

# -------------------- Order Service Route:
spring.cloud.gateway.routes[1].id=order-service
spring.cloud.gateway.routes[1].uri=lb://order-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/shopit/orders/**


#---------------------Inventory service Route:
spring.cloud.gateway.routes[2].id=inventory-service
spring.cloud.gateway.routes[2].uri=lb://inventory-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/shopit/inventory/**



#----------------------Authentication using oAuth2.0 and Keycloak as authorization server--------------------------

spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/shopit-realm

# spring.security.oauth2.resourceserver.jwt.issuer-uri in Spring Security is used to specify the endpoint where the
# authorization server's public key or JSON Web Key Set (JWKS) can be obtained.

# When a JSON Web Token (JWT) is received by the resource server(microservice), it needs to validate the JWT's signature
# to ensure its authenticity. The issuer-uri configuration helps the resource server fetch the public key from the
# specified endpoint. With the public key, the resource server can verify the signature of the JWT and determine
# whether it is valid and trustworthy.

# By setting the issuer-uri, you define the location where the resource server can obtain the necessary information
# to verify the JWT, making sure it was issued by the expected authorization server.

#Notes:
#Grant Types:
#1. Client Credentials: Only Secret key is required \
#2. Password Credentials: Username and password also required along with secret key. To set up username and password:
#                         Enable Direct access grant, Go to USERS and add a user along with password.
#                         Also add a REALM ROLE e.g. ADMIN and assign this role to this user created.


#----------------------------------------Tracing using Micrometer and Zipkin------------------------------------------
management.tracing.sampling.probability=1.0